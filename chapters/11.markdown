Yerel Buffer Ayarları ve Eşlemeleri
===================================

Şimdi birkaç dakikamızı ayırıp daha önceden gördüğümüz 3 şeyi ziyaret edeceğiz:
eşlemeler, kısaltmalar ve ayarlar ama bir değişiklik ile. Her birini sadece bir
buffer üzerine ayarlayacağız.

Bu özelliğin gücü diğer bölümde belli olacak, şimdilik sadece temel olarak
göreceğiz.

Bu bölüm için Vim'de iki adet dosya açmanız lazım, ikisi de ayrı
bölümde(`:split`). Ben isimlerini `foo` ve `bar` yapacağım ama siz istediğiniz
ismi koyabilirsiniz. Ikisine de biraz yazı koyun.

Eşlemeler
---------

`foo` isimli dosyaya gelin ve şu komutları çalıştırın:

    :::vim
    :nnoremap          <leader>d dd
    :nnoremap <buffer> <leader>x dd

Şimdi `foo` dosyasında kalın ve normal modda olduğunuza emin olun ve
`<leader>d` tuşlarına basın. Vim bir satırı silecek. Bu zaten bildiğimiz bir
şey.

Hala `foo` dosyasındayken `<leader>x` tuşlarına basın. Vim yine bir satır
silecek. Normal çünkü `<leader>x` tuşlarını da `dd` tuşlarına eşledik.

Şimdi `bar` dosyasına geçelim. Normal moddayken `<leader>d` tuşlarına basın.
Tekrar, Vim üzerinde bulunduğunuz satırı silecek. Şaşırtıcı bir şey değil.

Şimdi sürprize gelelim: hala `bar` dosyasındayken `<leader>x` tuşlayın.

Tüm satırı silmek yerine Vim sadece bir karakter sildi! Ne oldu burada?

Ikinci `nnoremap` komutundaki `<buffer>` Vim'e sadece şu an onu tanımladığımız
buffer içindeysek çalıştırmasını söyledi.

`bar` dosyasında `<leader>x` tuşladığınızda Vim ona dair eşlemeyi bulamadı ve
onu iki komuta ayırdı: `<leader>` (ki kendi başına bir şey yapmaz) ve `x` (ki
bu da tek karakter silmeye yarar)

Yerel Lider (Local Leader)
-----------

Biz yerel buffer örneğimizde `<leader>x` kullandık ama bu yanlış bir kullanım.
Genelde sadece belli bufferlara etki edecek bir eşleme yaparken `<leader>`
yerine `<localleader>` kullanılır.

Iki farklı lider tuşu kullanmak bir bakıma "namespacing"dir, bunun sayesinde
farklı eşlemeleri aklınızda tutmanızı kolaylaştırır.

Bu bir plugin yazarken çok daha önemlidir. `<localleader>` kullanmak siz
eşlemelerinizi yaparken yanlışlıkla başkasının uzun zamandır alışkın olduğu ve
beynine kazınmış `<leader>` ile olan eşlemesini silmenize engel olur.

Ayarlamalar
-----------

Bu kitabın önceki bölümlerinde `set` ile yapılan ayarlamaları görmüştük. Bazı
ayarlar tüm Vim için geçerli olacak ancak diğerleri buffera özel olabilir.

`foo` dosyasına dönün ve şu komutu çalıştırın:

    :::vim
    :setlocal wrap

Şimdi `bar` dosyasına dönün ve şu komutu çalıştırın:

    :::vim
    :setlocal nowrap

Vim pencerenizi biraz küçültecek olursanız `foo` dosyasındaki yazıların satır
sonunda aşağı geçtiğini ama `bar` dosyasındaki yazıların öyle olmadığını
göreceksiniz.

Hadi başka bir ayar için deneyelim. `foo` dosyasına geçin ve şu komutu
çalıştırın:

    :::vim
    :setlocal number

Şimdi `bar` dosyasına dönün ve şu komutu çalıştırın:

    :::vim
    :setlocal nonumber

Şimdi `foo` dosyasında satır sayıları gözüküyor ama `bar` dosyasında
gözükmüyor.

Her ayar `setlocal` ile ayarlanamaz. Eğer ki bir ayarın yerel olarak ayarlanıp
ayarlanamayacağını anlamak istiyorsanız onun `:help` sayfasını okumanız
gerekli.

Yerel ayarların gerçekten nasıl çalıştığı hakkında birkaç detayı atladım
şimdilik. Egzersizleri yaparken korkutucu detaylarla ilgili daha çok şey
öğreneceksiniz.

Gölgelemek
----------

Daha ileri gitmeden önce yerel eşlemelerin ilginç bir özelliği hakkında
konuşalım. `foo` dosyasına geçin ve şu komutları çalıştırın:

    :::vim
    :nnoremap <buffer> Q x
    :nnoremap          Q dd

Şimdi `Q` tuşuna basın. Ne oldu?

`Q` tuşuna bastığınızda Vim ilk eşlemeyi kullanacak ikinciyi değil, çünkü ilk
eşleme ikinci eşlemeden daha spesifik.

Şimdi `bar` dosyasına geçin ve `Q` tuşuna basın. Vim'in ikinci eşlemeyi
kullandığını göreceksiniz çünkü bu bufferda ikinci eşleme başka bir eşleme ile
gölgelenmiş değil.

Egzersizler
-----------

`:help local-options` sayfasını oku.

`:help setlocal` sayfasını oku.

`:help map-local` sayfasını oku.
