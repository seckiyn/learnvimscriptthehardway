Daha Fazla Operatör-Bekleyen Eşlemeler
======================================

Operatör ve hareketler Vim içerisindeki en güçlü konseptlerden biri ve bu ikisi
Vim bu kadar verimli olmasının en büyük sebeplerinden birisi. Biraz daha yeni
hareket tanımlama pratiği yapacağız, çünkü bu güçlü özellik Vim *çok daha*
güçlü kılacak.

Diyelim ki bir Markdown dosyasına yazı yazacaksınız. Eğer daha önce Markdown
kullanmadıysanız merak etmeyin, telaşlanmayın, bizim burada kullanacağımız şey
çok basit. Şunu bir dosyanın içine yazın:

    :::markdown
    Topic One
    =========

    This is some text about topic one.

    It has multiple paragraphs.

    Topic Two
    =========

    This is some text about topic two.  It has only one paragraph.

Bu altları `=` çizilmiş karakterler Markdown tarafından başlık olarak görülür.
Hadi bize hareketleri kullanarak başlıkları hedef almamızı sağlayacak eşlemeler
yapalım. Şu komutu çalıştırın:

    :::vim
    :onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>

Bu eşleme biraz karışık, imlecinizi paragraflardan birinin üzerine getirin
(başlığın değil) ve `cih` tuşlarına basın. Vim hangi bölümdeyseniz onun
başlığını silecek ve sizi insert moduna girecek (**c**hange **i**nside
**h**eading (başlık içini değiştir))

Bu eşleme daha önce görmediğimiz şeyleri kullanıyor, o yüzden her parçasına
teker teker bakalım. Eşlemenin ilk parçası `:onoremap ih` sadece eşleme komutu
bunu çoktan biliyoruz yani bunu geçeceğiz. Şimdilik `<c-u>` tuşlarını da
görmezden geleceğiz.

Şimdi komutun gerisine bakalım:

    :::vim
    :execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>

Normal
------

`:normal` komutu birtakım karakterleri alır ve sanki normal moddaymışçasına
işlevlerini gerçekleştirir. Daha detaylarına önümüzdeki bölümlerde bakacağız
ama şimdiden birkaç kez karşımıza çıktı yani artık biraz da olsun öğrenme vakti
geldi. Şu komutu çalıştırın:

    :::vim
    :normal gg

Vim sizi dosyanın başına taşıyacak. Şimdi şu komutu çalıştırın:

    :::vim
    :normal >>

Vim şu anki satırın başına boşluklandıracak.

Şimdilik eşlemedeki `!` nedir kafanıza takmayın. Onun hakkında daha sonra
konuşacağız.

Execute
-------

`execute` komutu string formatında (string nedir daha sonra ne olduğunu
detaylıca göreceğiz) alır ve onu bir komut olarak uygular. Şunu çalıştırın:

    :::vim
    :execute "write"

Vim sizin dosyanızı kaydedecek aynı siz `:write<cr>` yazmışçasınıza. Şimdi şu
komutu çalıştırın.

    :::vim
    :execute "normal! gg"

Vim `:normal! gg` komutunu çalıştıracak ki önceden gördüğümüz gibi bizi
dosyanın başına taşıyor. Ama doğrudan `normal!` komutunun kendini kullanmak
yerine neden bununla uğraşalım?

Şimdi şu komuta bakın ve ne yapacağını tahmin etmeye çalışın:

    :::vim
    :normal! gg/a<cr>

Şunu yapması gerekiyor gibi:

* Dosyanın başına git.
* Bir arama başlat.
* Aramada "a" karakterini hedefle.
* Return tuşuna basarak aramayı başlat.

Şimdi çalıştırın. Vim sadece dosyanızın en üst kısmına gidecek ve başka bir şey
yapmayacak.

`normal!` komutunun sorunu `<cr>` gibi "özel karakterleri" tanımaması. Bu
kısıtlamanın üstesinden gelmek için birkaç yol var ancak en kolay yolu
`execute` komutunu kullanmak.

`execute` verdiğiniz yazıya bakarak daha çalıştırmadan *önce* özel karakterleri
kendi karşılıkları ile değiştirilecek. Bu durumda `\r` satır başı anlamına
gelir. Çifte ters eğik çizgi ters eğik çizginin kendisine eşittir.

Eğer ki eşlemede bunları göz önüne alarak değişiklikler yaparsak sonunda ne
çıkacağını görebiliriz:

    :::text
    :normal! ?^==\+$<cr>:nohlsearch<cr>kvg_
                    ^^^^           ^^^^
                     ||             ||
    Bunlar aslında satır başları, dört karakterin kendisi değil
    "sol açılı ayraç", "c", "r", ve "sağ açılı ayraç".

Artık şimdi `normal!` komutu gerçekten sanki bunları normal modda tuşlamışız
gibi davranacak. Hadi şimdi hepsini ayıralım ve tam da ne yapacağını görelim:

    :::vim
    ?^==\+$
    :nohlsearch
    kvg_

Ilk parça `?^==\+$` komutu iki veya daha fazla eşittir işareti içeren
kelimeleri arayan tersine bir arama başlatır. Bu komut imlecimizi eşittir
işareti olan satırın başında bırakır.

Tersine arama yapıyoruz çünkü "başlık içinde değiştir (change inside heading)"
derken büyük ihtimalle o an üzerinde bulunduğumuz paragrafın başlığını
değiştirmek istiyoruz. Sonraki paragrafın başlığını değil.

Ikinci parça bir `:nohlsearch` komutu. Bu, basitçe, arama yaparken vurgulamayı
kaldırır böylece arama yaparken rahatsız olmayacağız.

Son parça üç farklı normal mod komutu:

* `k`: bir satır yukarı. Eşittir işareti olan satırın başında olduğumuza göre
  bir yukarı çıkarak başlığın bulunduğu satıra gelmiş olduk.
* `v`: visual moda giriş yap.
* `g_`: şu anda bulunduğun satırın son boş olmayan karakterine git. `$` yerine
  bunu kullanıyoruz çünkü `$` yeni satıra geçme karakterini de içine alır. Bu
  da istediğimiz bir şey değil.

Sonuçlar
--------

Bu çok uzun oldu ancak şimdi tüm eşlemeyi görmüş olduk. Son kez yeniden gözden
geçirelim:

* Bu bölümün başlığını kapsayan bir operatör-bekleyen eşleme yaptık.
* `execute` ve `normal!` komutlarını kullanarak normal mod komutlarını
  kullanarak başlığı bulduk ve nasıl bunlar içinde özel karakter kullanılır onu
  öğrendik.
* Bu eşlememiz üzerindeki başlığı gösteren eşittir işaretlerini buldu ve
  onların üzerinde bulunan başlığı görsel olarak seçti.
* Gerisini Vim halletti.

Daha ileri gitmeden bir eşlemeye daha bakalım. Şu komutu çalıştırın:

    :::vim
    :onoremap ah :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rg_vk0"<cr>

Başlığını değiştirmek istediğiniz bölümün üzerine gelin ve `cah` tuşlayarak
deneyin. Bu sefer Vim sadece başlığın yazısını değiştirmekle kalmayacak eşittir
işaretlerini de temizleyecek. Bu hareketi "bu bölümün başlığının etrafı (around
this section's heading)" olarak düşünebilirsiniz.

Bu eşlemede neler farklı? Hadi gelin yan yana bakalım:

    :::vim
    :onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
    :onoremap ah :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rg_vk0"<cr>

The only difference from the previous mapping is the very end, where we select
the text to operate on:

Bu eşlemenin diğer eşlemeden tek farkı en sonda, üzerinde işlem yapacağımız yazıyı seçerkenki kısımda:

    :::text
    inside heading: kvg_
    around heading: g_vk0

Geri kalan eşleme birebir aynı bu yüzden eşittir işaretlerinin olduğu yerden
başlayacağız. Oradan başlayarak:

* `g_`: satırda son boş olmayan karaktere git.
* `v`: visual moda giriş yap.
* `k`: bir satır yukarı git. Bu bizi başlığın yazısını içeren kısıma taşır.
* `0`: satırın ilk karakterine gel.

Bunun sonucunda hem yazı hem de eşittir işaretleri görsel olarak seçilecek ve
Vim ikisinin de üzerinde işlem uygulayacak.

Egzersizler
-----------

Markdown aynı zamanda `-` karakterlerini kullanarak da başlık belirtebilir.
Eşlemedeki regex komutlarını düzenleyerek iki tip başlığı da kabul eden bir
hâle getirin. `:help pattern-overview` sayfasını kontrol etmek
isteyebilirsiniz. Unutmayın regex bir string içerisinde yani ters eğik
çizgilerin çifte ters eğik çizgi kullanılarak kaçılması gerekecek.

Add two autocommands to your `~/.vimrc` file that will create these mappings.
Make sure to only map them in the appropriate buffers, and make sure to group
them so they don't get duplicated each time you source the file.

`~/.vimrc` dosyanıza bu komutları ekleyen iki adet otokomut ekleyin. Onları
doğru bufferlara eşlediğinizden emin olun ve onları gruplamayı ihmal etmeyin
böylece her kaynaklandığında klonlanıp yeniden işlenmesinler.

`:help normal` sayfasını okuyun.

`:help execute` sayfasını okuyun.

`:help expr-quote` sayfasını okuyarak string yapılarında ne tip kaçış
karakterleri kullanabileceğinizi görün.

"diğer email adresinin içinde (inside next email address) hareketini
gerçekleştiren operatör-bekleyen eşleme yapın böylece "change inside next email
address" gibi bir komutu kullanabilin. `in@` karakterleri bu iş için uygun bir
seçim olabilir. Büyük ihtimalle bu iş için `/...biraz regex...<cr>` kullanmak
isteyebilirsiniz.
