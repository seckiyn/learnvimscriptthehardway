Operatör-Bekleyen Eşlemeler
===========================

Bu bölümde Vim'deki eşleme sistemindeki bir tavşan deliğine göz atacağız:
"Operatör-Bekleyen Eşlemeler". Biraz yavaşlayıp kavramlar hakkında aynı şeyleri
düşündüğümüze emin olalım.

Bir operatör sizin hareket etme komutu girmenizi bekleyen bir komuttur ve şu an
bulunduğunuz yer ile hareket komutunun götürdüğü yer arasında bir şey yapar.

Örnek olarak `d`, `y` ve `c` komutlarını verebiliriz. Misal:

    :::text
    Tuşlar Operatör          Hareket 
    ----   --------          -------------
    dw     Delete(Sil)       to next word(diğer kelimeye kadar)
    ci(    Change(Değiştir)  inside parens(parantez içini)
    yt,    Yank(Kopyala)     until comma(virgüle kadar)

Hareket Eşlemeleri
------------------

Vim size bulunan hareketleri kullanarak yeni hareket ekleme özelliği veriyor.
Şu komutu çalıştırın:

    :::vim
    :onoremap p i(

Şimdi şu yazıyı bir buffer içerisine yerleştirin:

    :::text
    return person.get_pets(type="cat", fluffy_only=True)

Imlecinizi "cat" yazan yere koyup `dp` tuşlarına basın. Ne oldu? Vim parantez
içindeki tüm yazıyı sildi. Bu yeni hareketi "parametreler" olarak
düşünebilirsiniz.

`onoremap` komutu Vim'e eğer ki bir operatöre bir hareket teslim etmesi
gerekiyorsa ve `p` komutunu gördüyse ona `i(` olarak muamele etmesi gerektiğini
söylüyor. `dp` tuşlarına bastığımızda bunu "delete parameteres (parametreleri
sil)" olarak düşünebiliriz ki Vim de bunu "delete inside parantheses" komutuna
çevirir.

Bu yeni eşleme diğer tüm operatörlerle hiçbir şey yapmadan kullanabiliriz.
Öncekiyle aynı yazıyı yazın (ya da sadece geri sarın):

    :::text
    return person.get_pets(type="cat", fluffy_only=True)

Şimdi imlecinizi "cat" yazısının üstüne getirin ve `cp` tuşlarına basın. Ne
oldu? Vim parantez içindeki tüm yazıyı sildi ama bu sefer sizi insert modu
içerisinde bıraktı çünkü bu sefer "delete (sil)" yerine "change (değiştir)"
komutunu kullandık.

Başka bir örnek deneyelim. Şu komutu çalıştırın:

    :::vim
    :onoremap b /return<cr>

Şimdi şu yazıyı bir buffera kopyalayın:

    :::python
    def count(i):
        i += 1
        print i

        return foo

Imlecinizi ikinci satırdaki `i` üzerine getirin ve `db` tuşlarına basın. Ne
oldu? Vim fonksiyonun Vim'in normal mod araması ile bulduğumuz `return`
sözcüğüne kadar tüm gövdesini silecek.

Yeni bir operatör-bekleyen hareket tanımlamayı denediğinizde şöyle
düşünebilirsiniz:

1. Imleç pozisyonunda başla.
2. Visual moda gir (charwise).
3. ... eşleme tuşları buraya ...
4. Şu an harekette kullanmak istediğiniz yazı seçilmiş olmalı.

Üçüncü adımdaki tuşları bulmak sizin işiniz.

Başlangıcı Değiştirmek
------------------

Şimdiye kadar öğrendiklerimiz içinde bir sorun görmüş olabilirsiniz. Eğer
hareketler her zaman imleç pozisyonundan başlaması gerekiyorsa bizim ne
yapabileceğimizi sınırlandırmıyor mu?

Vim'im sizin ne yapabileceğinizi sınırlamak gibi bir alışkanlığı yok yani tabii
ki bunun da bir çözümü var. Şu komutu çalıştırın.

    :::vim
    :onoremap in( :<c-u>normal! f(vi(<cr>

Bu çok korkunç gelebilir ancak önce bir deneyelim. Şu yazıyı bir buffera
girelim:

    :::python
    print foo(bar)

Şimdi imlecinizi `print` satırı içinde herhangi bir yere koyun ve `cin(`
tuşlarına basın. Vim parantezin içindekileri silecek ve sizi insert modda
parantezlerin için bırakacak.

Bu eşlemeyi "inside next parantheses (sıradaki parantezin içi)" olarak
düşünebilirsiniz ve operatör aynı satır içinde sıradaki parantezin içindeki
yazı üzerinde işlem gerçekleştirecek.

Şimdi bir de benzer bir eşleme olarak "inside last parentheses (son parantez
içi)" ("previous" yani önceki parantez daha uygun olurdu ama "paragraf"
hareketi gölgelerdi"). Şu komutu çalıştırın:

    :::vim
    :onoremap il( :<c-u>normal! F)vi(<cr>

Kendi başınıza bir yazı üzerinde deneyin ve çalıştığından emin olun.

Peki bu eşlemeler nasıl çalıştı? Önce `<c-u>` parçasını şimdilik görmezden
gelebilirsiniz -- bana güvenin bu komut sadece tüm durumlarda çalışmasını
sağlıyor. Eğer onu çıkarırsak elimizde şöyle bir şey kalıyor:

    :::vim
    :normal! F)vi(<cr>

`:normal!` komutunu ileriki bölümlerde konuşacağız, ama şimdilik normal modda
tuş basmayı simüle ettiğini bilmek yeterli olur. Örneğin `:normal! dddd`
komutunu kullanmak iki satırı siler, aynı normal modda `dddd` tuşlarına basmak
gibi. Sondaki `<cr>` ise `:normal!` komutunu çalıştıran komut.

Şimdi sadece son parçadaki tuşları çalıştırdığını biliyoruz eşlemenin:

    :::vim
    F)vi(

Anlaması kolay bir şey:

* `F)`: En yakın `)` karakterini bulana kadar geri git.
* `vi(`: Parantez içini visual modda görsel olarak seç.

Şimdi üzerinde operatör kullanmak istediğimiz yazıyı görsel olarak seçtik ve
şimdi Vim normal olarak operasyonu üzerinde uyguluyor.

Genel Kurallar
--------------

Şu iki kuralı hatırlayarak operatör-bekleyen eşlemeleri anlayabilirsiniz:

* Eğer eşlemeniz sonunda bir grup yazı visual modda görsel olarak seçilmiş
  olursa Vim bu yazı üzerinde işlem yapacak.
* Diğer türlü Vim orijinal imleç konumu ile son imleç konumu arasındaki yazı
  arasında işlem yapacak.

Egzersizler
-----------

"Around next parentheses (sıradaki parantez etrafında) ve "around last
parenthese (önceki parantez etrafında)" hareketlerini gerçekleştiren
operatör-bekleyen eşlemeler yapın

Süslü parantez için üstteki eşlemeler benzer içinde/arasında ve önceki/sonraki için eşlemeler yapın.

`:help omap-info` sayfasını okuyun ve oradaki örneklerden `<c-u>` ne yapıyor
onu çıkarmaya çalışın.
