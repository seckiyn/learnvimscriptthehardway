Otokomutlar
============

Şimdi neredeyse eşlemeler kadar önemli konulardan birisine göz atacağız:
otokomutlar (autocommand)

Otokomutlar Vim'e şöyle bir şey olduğunda şöyle bir komut çalıştır demenin bir
yolu . Hadi hemen bir örneğe bakalım.

`:edit foo` komutuyla bir dosya açın ve hemen `:quit` komutuyla kapatın. Sabit
diskinize baktığınızda dosyanın orada olmadığını göreceksiniz. Çünkü Vim
aslında siz kaydedene kadar dosyayı yaratmıyor.

Hadi bunu değiştirelim böylece Vim siz dosyayı açar açmaz kaydetsin. Şu
komutları çalıştırın:

    :::vim
    :autocmd BufNewFile * :write

Bu biraz fazla olmuş olabilir ama deneyin ve çalıştığını görün. `:edit foo`
komutunu tekrar çalıştırın ve `:quit` komutuyla çıkın ve sabit diskinize bakın.
Bu sefer dosya orada olacak (tabii ki boş olarak)

Otokomutu kaldırmak için Vim'i kapatmanız gerekecek. Bundan nasıl
kurtulacağımızı sonraki bölümlerden birisinde göreceğiz.

Otokomutun Yapısı
---------------------

Hadi gelin daha önce çalıştırdığımız otokomuta bakalım:

    :::text
    :autocmd BufNewFile * :write
             ^          ^ ^
             |          | |
             |          | Çalıştırılacak komut
             |          |
             |          Olayı filtrelemek için "şablon"
             |
             Izlenecek "olay"

Komutun ilk parçası beklediğimiz olay. Vim beklenecek bir sürü olay veriyor.
Bazıları şunlar:

* Var olsun olmasın bir dosyanın okunması
* Bir buffer'ın `filetype` ayarının değiştirilmesi
* Klavyedeki bir tuşa bir süre boyunca basılmaması
* Insert moda girilmesi
* Insert moddan çıkılması

Bu olayların sadece çok küçük bir parçası. Çok ilginç şeyler
gerçekleştirebileceğiniz daha bir sürü olay var.

Komutun sıradaki parçası komutu çok daha spesifik şekilde çağırmanızı
sağlayacak bir "şablon". Yeni bir Vim açın ve şu komutu çalıştırın:

    :::vim
    :autocmd BufNewFile `*`.txt :write

Bu neredeyse diğer komutla aynı ama bu sefer sadece sadece `.txt` ile biten
dosyaları etkileyecek.

Bunu `:edit bar` komutun çalıştırıp, `:quit` ile çıkıp tekrar `:edit bar.txt`
komutunu çalıştırın ve yine `:quit` ile çıkın. Vim'in `bar.txt` dosyasını
otomatik olarak yazdığını ancak şablona uymadığı için `bar` dosyasını
yazmadığını göreceksiniz.

Komutun son parçası bunlar olursa çalıştırmak istediğimiz komutu gösteriyor.
Burası kendi kendini açıklıyor bir şey hariç: burada `<cr>` gibi özel
karakterleri kullanamazsınız. Bu sınırlamanın nasıl üstesinden gelebileceğimizi
kitabın ilerisinde göreceğiz.

Başka Bir Örnek
---------------

Hadi başka bir otokomut tanımlayalım ama bu sefer farklı bir olay kullanalım.
Şu komutu çalıştırın:

    :::vim
    :autocmd BufWritePre `*`.html :normal gg=G

Bu komutla biraz kendimizi aşıyoruz ama `normal` komutu ne onu daha sonra
göreceğiz. Ama şimdilik görmezden gelin çünkü şu ana kadar öğrendiklerimizle
yararlı bir örnek düşünmek biraz zor.

Şimdi `foo.html` isimli bir dosya yaratın. Vim ile açın ve şu yazıyı olduğu
gibi kopyalayın, boşlukları da dahil edin.

    :::html
    <html>
    <body>
     <p>Hello!</p>
                     </body>
                      </html>

Şimdi bu dosyayı `:w` ile kaydedin. Ne oldu? Vim kaydetmeden önce dosyadaki tüm
yazıların boşluklarını yeniden düzenledi.

`:normal gg=G` komutunun tüm dosyanın boşluklarını düzenler, şimdilik benim
sözümle yetinmeniz gerekecek. Nasıl çalıştığını şimdilik kafayı takmayın.

Bizim otokomuta dikkat etmemiz lazım. `BufWritePre` olayı, siz tam dosyayı
kaydetmeden önce kontrol edilir.

Sadece `.html` ile biten dosyalarda çalışmasından emin olmak için şablon olarak
`*.html` kullandık. Böylece otokomutları spesifik dosyalar üzerinde
kullanabiliriz ki bunun ne kadar güçlü bir özellik olduğunu diğer bölümlerde
inceleyeceğiz.

Çoklu Olaylar
---------------

Tek bir otokomutu olaylar arasına virgül koyarak birden fazla olaya
bağlayabilirsiniz. Şu komutu çalıştırın:

    :::vim
    :autocmd BufWritePre,BufRead `*`.html :normal gg=G

Bu neredeyse önceki komutumuzla aynı ama bu sefer herhangi bir HTML dosyasını
kaydetmemizden önce düzenleyeceği gibi ilk açtığımızda da düzenlenecek. HTML
dosyalarını düzenlemeyen iş arkadaşlarınız varsa bu komut yararlı olabilir.

A common idiom in Vim scripting is to pair the `BufRead` and `BufNewFile` events
together to run a command whenever you open a certain kind of file, regardless
of whether it happens to exist already or not.  Run the following command:

Vim'de genel olarak `BufRead` ve `BufNewFile` olayları birlikte kullanılırlar,
böylece herhangi bir dosya tipinden açtığınızda dosyanız daha önceden var olsun
var olmasın komutu uygulayabilirsiniz. Şu komutu çalıştırın:

    :::vim
    :autocmd BufNewFile,BufRead `*`.html setlocal nowrap

Bu HTML dosyası üzerinde çalışırken satırın aşağı geçmesini önleyecek.

Dosya Tipi Olayları
-------------------

Vim'deki en yararlı olaylardan biri `FileType` olayıdır. Bu Vim bufferın
`filetype` ayarını değiştirdiğinde çalışır.

Hadi birkaç farklı dosya tipi için işimize yarayacak eşlemeler yapalım. Şu
komutları çalıştırın.

    :::vim
    :autocmd FileType javascript nnoremap <buffer> <localleader>c I//<esc>
    :autocmd FileType python     nnoremap <buffer> <localleader>c I#<esc>

Bir Javascript dosyası açın (`.js` ile biten herhangi bir dosya), herhangi bir
satıra gidin ve `<localleader>c` tuşlarına basın. Bu o satırı yorum haline
getirecek.

Bir Python dosyası açın (`.py` ile biten herhangi bir dosya), herhangi bir
satıra gidin ve `<localleader>c` tuşlarına basın. Bu o satırı yorum haline
getirecek ama bu sefer python yorum karakterini kullanacak!

Yerel buffer ayarları ile otokomutları birlikte kullanarak dosya tipine özel
olarak farklı eşlemeler yapabiliriz.

Bu kodlama yaparken gerekli beyin yükünü azaltıyor. Dosyanın başına gidip yorum
karakterini eklemeyi düşünmek yerine biz sadece "bu satırı yorum haline getir"
şeklinde düşünebiliriz.

Egzersizler
-----------

`:help autocmd-events` sayfasını gözden geçirin ve otokomutlara
bağlayabileceğiniz olayları görün. Hepsini birden ezberlemenize gerek yok.
Sadece neler yapabileceğinizi görün.

Kendi belirlediğiniz dosya tipleri için `FileType` otokomut olayını ve
`setlocal` komutunu kullanarak ayarlarını değiştirin. Şu ayarları değiştirmek
isteyebilirsiniz: `wrap`, `list`, `spell` ve `number`. 

Çok kullandığınız dosya tipleri için "bu satırı yorum haline getir" tarzında
birkaç tane daha otokomut ekleyin.

Tüm bu eşlemeleri `~/.vimrc` dosyanıza ekleyin.  `~/.vimrc` dosyasını açarken
geçen bölümlerde hazırladığımız dosyayı düzenle ve dosyayı kaynakla
eşlemelerini kullanmayı unutmayın.
